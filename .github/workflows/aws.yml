name: Deploy to Amazon ECS

on:
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1       
  ECR_REPOSITORY: ecs_calculadora_api           
  ECS_SERVICE: CalculadoraApiServices             
  ECS_CLUSTER: CalculadoraCluster                 
  ECS_TASK_DEFINITION: ./infra/task-definition.json 
                                               
  CONTAINER_NAME: CalculadoraApiServices       
                                               
  ALB_ARN: arn:aws:elasticloadbalancing:us-east-1 :${{ secrets.AWS_ACCOUNT_ID }}:loadbalancer/app/calculadora-applb/1606a3ac18ebfb16

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -f app/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG app
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Substitui o ARN da Task Definition no appspec.yaml
      run: |
        sed -i "s|PLACEHOLDER_TASK_DEFINITION|${{ steps.register-task.outputs.task-definition-arn }}|g" appspec.yaml

    - name: Obter ARN do TG da porta 5010
      id: get-tg
      run: |
        echo "ALB ARN: ${{ env.ALB_ARN }}"

        LISTENER_5010_ARN=$(aws elbv2 describe-listeners \
          --load-balancer-arn "${{ env.ALB_ARN }}" \
          --query "Listeners[?Port==\`5010\`].ListenerArn" \
          --output text)

        TG_ARN=$(aws elbv2 describe-rules \
          --listener-arn $LISTENER_5010_ARN \
          --query "Rules[?IsDefault==\`true\`].Actions[0].TargetGroupArn" \
          --output text)

        echo "Target Group da porta 5010: $TG_ARN"
        echo "tg_arn=$TG_ARN" >> "$GITHUB_OUTPUT"
  
    - name: Atualizar listener da porta 5020 para usar mesmo TG
      run: |
        LISTENER_5020_ARN=$(aws elbv2 describe-listeners \
          --load-balancer-arn "${{ env.ALB_ARN }}" \
          --query "Listeners[?Port==\`5020\`].ListenerArn" \
          --output text)

        RULE_ARN=$(aws elbv2 describe-rules \
          --listener-arn $LISTENER_5020_ARN \
          --query "Rules[?IsDefault==\`true\`].RuleArn" \
          --output text)

        echo "Atualizando listener 5020 para apontar para o TG: ${{ steps.get-tg.outputs.tg_arn }}"

        aws elbv2 modify-rule \
          --rule-arn $RULE_ARN \
          --actions Type=forward,TargetGroupArn=${{ steps.get-tg.outputs.tg_arn }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
